{"version":3,"sources":["head.js","utils.js","chart.js","core.js","sort.js","redraw.js","tail.js"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;ACJA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AClCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AChxKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACvxQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"d3c.js","sourcesContent":["(function (window) {\n    'use strict';\n\n    /*global define, module, exports, require */\n    var d3c = {version: \"0.0.1\"};","function formatText(d) {\n    switch (d.config.format) {\n        case 'text':\n            return d.value;\n            break;\n        case 'number':\n            return d3.format(',0f')(d.value);\n            break;\n        case 'percent':\n            return d3.format('.2%')(d.value);\n            break;\n        case 'currency':\n            return d3.format('$.2f')(d.value);\n            break;\n        default:\n            return d.value;\n    }\n}\n\nfunction pickColor(color) {\n    var c = d3.values(d3.rgb(color)).slice(0, 3);\n    for (var i = 0; i < c.length; ++i) {\n        c[i] = c[i] / 255;\n        if (c[i] <= 0.03928) {\n            c[i] = c[i] / 12.92\n        } else {\n            c[i] = Math.pow(( c[i] + 0.055 ) / 1.055, 2.4);\n        }\n    }\n    var l = 0.2126 * c[0] + 0.7152 * c[1] + 0.0722 * c[2];\n    //return ( l > 0.179 ) ? 'black' :'white';\n    return ( l > 0.5 ) ? 'black' : 'white';\n}\n\n","Table.prototype.chart = function (config) {\n    if (arguments.length === 0 || $.isEmptyObject(config)) return this._chart || {};\n    config || (config = {});\n    this.chartConfig(config);\n    this._chart = this.c3.generate(this.chartConfig()); // TODO: update if exists\n    return this._chart;\n};\n\nTable.prototype.chartConfig = function (config) {\n    if (arguments.length === 0 || $.isEmptyObject(config)) return this._chart_config || {};\n    config || (config = {});\n    this._chart_config = config;\n    return this._chart_config; // TODO: update if config changes and exists\n};\n\nTable.prototype.rowSelect = function (row) {\n    var self = this;\n    row.forEach(function (cell, i) {\n        if (cell.key === 'series') {\n            console.log(cell.value);\n            self.chart().load(\n                {\n                    json: cell.value,\n                    names: {\n                        'previous': 'Previous',\n                        'latest': 'Latest'\n                    },\n                    keys: {\n                        x: 'date',\n                        value: ['latest', 'previous']\n                    },\n                    type: 'line',\n                    types: {\n                        'previous': 'area'\n                    },\n                    classes: {\n                        'previous': 'd3c-previous'\n                    },\n                    colors: {\n                        'previous': '#e5e5e5',\n                        'latest': '#64bc52'\n                    }\n                }\n            );\n        }\n    });\n};\n\n","function Table(config) {\n    config = config || {};\n    this.bindto = ('bindto' in config) ? config.bindto : \"#d3c-table\";\n\n    this.selectTable = d3.select(this.bindto).append('table');\n    this.selectTable\n        .append('thead')\n        .append('tr');\n    this.selectTable\n        .append('tbody');\n\n    this.data(('data' in config) ? config.data : []);\n    this.columns(('columns' in config) ? config.columns : []);\n    this.sort(('sort' in config) ?  config.sort : {});\n    this.c3 = window.c3;\n    this.chart(('chart' in config) ? config.chart : {data: {json: []}});\n}\n\nTable.prototype.data = function (data) {\n    if (arguments.length === 0) return this._data || [];\n    this._data = this._data || [];\n    var self = this;\n\n    data.forEach(function(row) {\n        self.addRow(row);\n    });\n\n    this.redraw();\n};\n\nTable.prototype.addRow = function (row) {\n    var newRow = [];\n    for (var k in row) {\n        if (row.hasOwnProperty(k)) {\n            newRow.push({\n                key: k,\n                value: row[k]\n            });\n        }\n    }\n\n    this._data.push(newRow);\n\n    this.redraw();\n};\n\nTable.prototype.updateRow = function (row) {\n    var data = this._data;\n\n    var findIndexForUpdate = function (array, key, value) {\n        for (var i = 0; i < array.length; i++) {\n            for (var j = 0; j < array[i].length; j++) {\n                if ('key' in array[i][j]) {\n                    if (array[i][j].key === key && 'value' in array[i][j]) {\n                        if (array[i][j].value === value) {\n                            return i;\n                        }\n                    }\n                }\n            }\n        }\n        return null;\n    };\n\n    var i = findIndexForUpdate(data, 'name', row.name);\n\n    if (i == null) {\n        this.addRow(row);\n        return;\n    }\n\n    var updatedRow = [];\n    for (var k in row) {\n        if (row.hasOwnProperty(k)) {\n            updatedRow.push({\n                key: k,\n                value: row[k]\n            });\n        }\n    }\n\n    data[i] = updatedRow;\n\n    this.redraw();\n\n};\n\n\nTable.prototype.columns = function (columns) {\n    if (arguments.length === 0) return this._columns || [];\n    columns || (columns = {});\n    this._columns = columns;\n\n    this.redraw();\n};\n\nTable.prototype.recalculate = function() {\n    var columns = this.columns(), data = this.data();\n    var tableWidth = ('undefined' === typeof this.selectTable.node()) ? 100 :\n        this.selectTable.node().getBoundingClientRect().width;\n\n    if (columns.length > 0 && data.length > 0) { // TODO: handle data without column definitions\n\n        columns.forEach(function(col,i) {\n            if (col.type === 'chart' || col.type === 'highlight') {\n                col.chart = col.chart || {};\n                col.chart.values = [];\n                data.forEach(function (row) {\n                    row.forEach(function (cell) {\n                        if (cell.key === col.key) {\n                            col.chart.values.push(+cell.value);\n                        }\n                    });\n                });\n                var widthRatio = parseFloat(col.width) / 100;\n\n                col.chart = col.chart || {};\n                col.chart.zeroBased = col.chart.zeroBased || false;\n                col.chart.width = Math.floor(tableWidth * widthRatio);\n                col.chart.x = d3.scale.linear().range([0, col.chart.width]);\n\n                col.chart.maxX = d3.max(col.chart.values, function (v) { return +v; });\n                col.chart.minX = d3.min(col.chart.values, function (v) { return +v; });\n\n                col.chart.maxX = (col.chart.maxX > Math.abs(col.chart.minX)) ?\n                    col.chart.maxX : Math.abs(col.chart.minX);\n                col.chart.minX = (col.chart.minX < (-1 * col.chart.maxX)) ?\n                    col.chart.minX : (-1 * col.chart.maxX);\n\n                col.chart.colors = [\"#f05336\", \"#faa224\", \"#ffd73e\", \"#c6e3bb\", \"#a3d393\", \"#64bc52\"];\n                col.chart.color = d3.scale.quantize()\n                    .domain([col.chart.minX, 0, col.chart.maxX])\n                    .range(col.chart.colors);\n\n                col.chart.x.domain([(col.chart.zeroBased) ? 0 : col.chart.minX, col.chart.maxX]).nice();\n            }\n        });\n\n        data.forEach(function(row, i) {\n            row.forEach(function(cell, ii) {\n                var columnConfig = $.grep(columns, function (e) {\n                    return e.key === cell.key;\n                });\n                cell.config = columnConfig[0] || {};\n                cell.config.match = $.isEmptyObject(columnConfig[0]) ? false : true;\n                if ('chart' in cell.config) {\n                    cell.x = cell.config.chart.x(cell.value) || 0;\n                    cell.color = cell.config.chart.color(cell.value) || '#000';\n                    if ('colorFrom' in cell.config.chart) {\n                        var cellFrom = $.grep(row, function (e) {\n                            return e.key === cell.config.chart.colorFrom;\n                        });\n\n                        cell.color = cellFrom[0].color || cell.color;\n                    }\n                }\n            });\n\n        });\n\n    }\n\n    this.sort();\n\n};\n\n\n\n","Table.prototype.sort = function (sort) {\n    var data = this.data();\n    if (data.length < 2 && arguments.length === 0) return this._sort || {};\n    if (arguments.length === 0) {\n        sort = this._sort || {};\n        if ('key' in sort && sort['key'].length) {\n            if ('direction' in sort) {\n                data.sort(sortByKey(sort.key, sort.direction));\n                this._data = data;\n            }\n        }\n    } else {\n        this._sort = {\n            key: ('key' in sort) ? sort.key : \"\",\n            direction: ('direction' in sort) ? sort.direction : \"asc\"\n        };\n        this.redraw();\n    }\n    return this._sort;\n};\n\nTable.prototype.sortColumn = function (selection) {\n    var self = this;\n    var key = selection.key || \"\";\n    var newDirection = \"asc\";\n    if ('_sort' in self) {\n        if ('key' in self._sort) {\n            if (self._sort.key === key) {\n                if ('direction' in self._sort) {\n                    newDirection = (self._sort.direction === \"asc\") ? \"desc\" : \"asc\"; // toggle sort order\n                }\n            }\n        }\n    }\n    this.sort({key: key, direction: newDirection});\n};\n\nfunction sortByKey(key, dir) {\n    return function (a, b) {\n        var aIndex = a.map(function (obj, index) {\n            if (obj.key == key) {\n                return index;\n            }\n        }).filter(isFinite);\n\n        var bIndex = b.map(function (obj, index) {\n            if (obj.key == key) {\n                return index;\n            }\n        }).filter(isFinite);\n\n        return (dir === 'asc') ? (a[aIndex].value > b[bIndex].value) : (a[aIndex].value < b[bIndex].value);\n    }\n}\n\n","Table.prototype.redrawHeader = function () {\n    var columns = this.columns();\n    var self = this;\n\n    var headerRows = this.selectTable.select('thead').selectAll('tr');\n    var headerCells = headerRows.selectAll('th').data(columns);\n\n    headerCells.enter().append('th')\n        .on('click', function (d) {\n            self.sortColumn(d);\n            self.redraw();\n        })\n        .style('width', function (d) {\n            return d.width;\n        })\n        .style('opacity', 0.0)\n        .transition()\n        .delay(500)\n        .duration(500)\n        .style('opacity', 1.0);\n\n    headerCells.html(function (d) {\n        var glyph = \"\";\n        if ('_sort' in self) {\n            if ('key' in self._sort) {\n                if (self._sort.key === d.key) {\n                    if ('direction' in self._sort) {\n                        glyph = (self._sort.direction === \"asc\") ?\n                            \"noticon noticon-uparrow\" : \"noticon noticon-downarrow\"\n                    }\n                }\n            }\n        }\n        return d.title + \"<span class='\" + glyph + \"'></span>\";\n    });\n\n    headerCells.exit()\n        .transition()\n        .delay(200)\n        .duration(500)\n        .style('opacity', 0.0)\n        .remove();\n\n    var header_cells_in_new_rows = headerRows.selectAll('th').data(columns);\n\n    header_cells_in_new_rows.enter().append('th')\n        .style('width', function (d) {\n            return d.width;\n        })\n        .style('opacity', 0.0)\n        .transition()\n        .delay(500)\n        .duration(500)\n        .style('opacity', 1.0);\n\n    header_cells_in_new_rows.html(function (d) {\n        var glyph = \"\";\n        if ('_sort' in self) {\n            if ('key' in self._sort) {\n                if (self._sort.key === d.key) {\n                    if ('direction' in self._sort) {\n                        glyph = (self._sort.direction === \"asc\") ?\n                            \"noticon noticon-uparrow\" : \"noticon noticon-downarrow\"\n                    }\n                }\n            }\n        }\n        return d.title + \"<span class='\" + glyph + \"'></span>\";\n    });\n\n    this.recalculate();\n};\n\nTable.prototype.redrawRows = function () {\n    var self = this;\n    var data = this.data();\n\n    if (data.length > 0) {\n        var rows = this.selectTable.select('tbody').selectAll('tr').data(data);\n        var cells = rows.selectAll('td').data(function (d) {\n            return $.grep(d, function (e) {\n                // only include rows that fit the column definitions as per bindColumnConfig()\n                return e.config.match;\n            });\n        });\n\n        cells.enter().append('td')\n            .style('width', function (d) {\n                return d.config.width;\n            })\n            .style('opacity', 0.0)\n            .transition()\n            .delay(500)\n            .duration(500)\n            .style('opacity', 1.0);\n\n        cells.call(drawCell);\n\n        cells.exit()\n            .transition()\n            .delay(200)\n            .duration(500)\n            .style('opacity', 0.0)\n            .remove();\n\n        var cells_in_new_rows = rows.enter().append('tr')\n            .on('click', function (d, i) {\n                self.rowSelect(d);\n            })\n            .selectAll('td')\n            .data(function (d) {\n                return $.grep(d, function (e) {\n                    return e.config.match;\n                });\n            });\n\n        cells_in_new_rows.enter().append('td')\n            .style('width', function (d) {\n                return d.config.width;\n            })\n            .style('opacity', 0.0)\n            .transition()\n            .delay(500)\n            .duration(500)\n            .style('opacity', 1.0);\n\n        cells_in_new_rows.call(drawCell);\n\n        rows.exit()\n            .transition()\n            .delay(200)\n            .duration(500)\n            .style('opacity', 0.0)\n            .remove();\n\n    }\n\n};\n\nfunction drawCell(selection) {\n\n    selection.each(function (dd, i) {\n        var $$ = d3.select(this);\n        if (dd.config.type === 'chart') {\n            var x = dd.config.chart.x;\n            var color = dd.config.chart.color;\n            var width = dd.config.chart.width;\n\n            $$.select('svg').remove(); // TODO: work on transition (super nice to have though)\n\n            var svg = $$.append('svg')\n                .attr({\n                    \"width\": width,\n                    \"height\": 20\n                });\n            svg.append(\"rect\")\n                .attr(\"class\", function (d) {\n                    return \"bar bar--\" + (d.value < 0 ? \"negative\" : \"positive\");\n                })\n                .attr(\"x\", function (d) {\n                    return (d.config.chart.zeroBased) ? x(0) : x(Math.min(0, d.value));\n                })\n                .attr(\"y\", 0)\n                .attr('rx', 3)\n                .attr('ry', 3)\n                .attr(\"width\", function (d) {\n                    return (d.config.chart.zeroBased) ? Math.abs(x(d.value)) : Math.abs(x(d.value) - x(0));\n                })\n                .attr(\"height\", 20)\n                .attr(\"fill\", function (d) {\n\n                    return d.color; // color(d.value);\n                });\n            svg.append('text')\n                .text(function (d) {\n                    return formatText(d);\n                })\n                .attr('y', 15)\n                .attr('x', function (d) {\n                    var posX = (d.config.chart.zeroBased) ? Math.abs(x(d.value)) : x(d.value);\n                    if (d.config.chart.zeroBased) {\n                        if (posX > (width / 2)) {\n                            return x(0) + Math.abs(x(0)) + 8;\n                        } else {\n                            return x(0) + Math.abs(x(d.value) - x(0)) + 5;\n                        }\n                    }\n                    if (posX < x(0)) {\n                        if (posX < (x(0) / 2)) {\n                            return posX + 5;\n                        } else {\n                            return posX - 40;\n                        }\n                    } else {\n                        if (posX > (x(0) + ((width - x(0)) / 2))) {\n                            return x(0) + Math.abs(x(d.value) - x(0)) - 40;\n                        } else {\n                            return x(0) + Math.abs(x(d.value) - x(0));\n                        }\n                    }\n                })\n                .attr('class', function (d, i) {\n                    var posX = x(d.value);\n\n                    if (posX < x(0)) {\n                        if (posX < (x(0) / 2)) {\n                            return 'd3c-chart-label-neg-high';\n                        } else {\n                            return 'd3c-chart-label-neg-low';\n                        }\n                    } else {\n                        if (posX > (x(0) + ((width - x(0)) / 2))) {\n                            return 'd3c-chart-label-pos-high';\n                        } else {\n                            return 'd3c-chart-label-pos-low';\n                        }\n                    }\n                })\n                .style('fill', function (d) {\n                    var posX = x(d.value);\n                    if (posX < x(0)) {\n                        if (posX < (x(0) / 2)) {\n                            return pickColor(d.color);\n                        } else {\n                            return '#000';\n                        }\n                    } else {\n                        if (posX > (x(0) + ((width - x(0)) / 2))) {\n                            return pickColor(d.color);\n                        } else {\n                            return '#000';\n                        }\n                    }\n                });\n        } else if (dd.config.type === 'highlight') {\n            $$.select('div').remove(); // TODO: work on transition (super nice to have though)\n            var hcolor = dd.config.chart.color;\n            $$.append('div')\n                .style('background-color', function (d) {\n                    return hcolor(d.value)\n                })\n                .style('text-align', 'center')\n                .text(function (d) {\n                    return formatText(d);\n                })\n                .style('color', function (d) {\n                    return pickColor(d3.select(this).style('background-color'));\n                });\n        } else {\n            $$.text(function (d) {\n                return formatText(d);\n            });\n        }\n    });\n\n}\n\nTable.prototype.redraw = function () {\n    var columns = this.columns(), data = this.data();\n    if (columns.length > 0 && data.length > 0) {\n        this.recalculate();\n        this.redrawHeader();\n        this.redrawRows();\n    }\n};","d3c.table = function (config) {\n    return new Table(config);\n};\n\n\nif (typeof define === 'function' && define.amd) {\n    define(\"d3c\", [\"d3\"], function () {\n        return d3c;\n    });\n} else if ('undefined' !== typeof exports && 'undefined' !== typeof module) {\n    module.exports = d3c;\n} else {\n    window.d3c = d3c;\n}\n\n})(window);"],"sourceRoot":"/source/"}