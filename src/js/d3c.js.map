{"version":3,"sources":["head.js","utils.js","core.js","chart.js","sort.js","redraw.js","tail.js"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;ACHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACjnPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AClFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACrfile":"d3c.js","sourcesContent":["( function( window ) {\n    'use strict';\n\n    var d3c = { version: '0.0.1' };","    function formatText( d ) {\n        if ( d.value === '-' ) return '-';\n        switch ( d.config.format ) {\n            case 'text':\n                return d.value;\n                break;\n            case 'number':\n                return d3.format( ',0f' )( d.value );\n                break;\n            case 'percent':\n                return d3.format( '.2%' )( d.value );\n                break;\n            case 'currency':\n                return d3.format( '$.2f' )( d.value );\n                break;\n            default:\n                return d.value;\n        }\n    }\n    function pickColor( color ) {\n        var i, l;\n        var c = d3.values( d3.rgb( color ) ).slice( 0, 3 );\n        for ( i = 0; i < c.length; ++i ) {\n            c[i] = c[i] / 255;\n            if ( c[i] <= 0.03928 ) {\n                c[i] = c[i] / 12.92\n            } else {\n                c[i] = Math.pow( ( c[i] + 0.055 ) / 1.055, 2.4 );\n            }\n        }\n        l = 0.2126 * c[0] + 0.7152 * c[1] + 0.0722 * c[2];\n        return ( l > 0.5 ) ? 'black' : 'white';\n    }\n    Array.prototype.indexOfObj = function( o ) {\n        var arr = this;\n        var i = 0;\n        for ( i = 0; i < arr.length; i++ ) {\n            if ( JSON.stringify( arr[i] ) === JSON.stringify( o ) ) { // TODO: hmmm may need better way to compare objects\n                return i;\n            }\n        }\n        return -1;\n    };\n    function toggleArrayItem( a, v ) {\n        var i = a.indexOf( v );\n        if ( i === -1 )\n            a.push( v );\n        else\n            a.splice( i, 1 );\n    }","\tfunction Table( config ) {\n\t\tconfig = config || {};\n\t\tthis.bindto = ( 'bindto' in config ) ? config.bindto : '#d3c-table';\n\t\tthis.selected = ( 'selected' in config ) ? config.selected : [];\n\t\tthis.description = ( 'description' in config ) ? config.description : '#d3c-table-description';\n\n\t\tif ( 'responsive' in config ) {\n\t\t\tif ( 'enabled' in config.responsive && 'threshold' in config.responsive ) {\n\t\t\t\tthis.responsive = config.responsive.enabled || false;\n\t\t\t\tthis._tableWidthMax = config.responsive.threshold || 0;\n\t\t\t}\n\t\t} else {\n\t\t\tthis.responsive = false;\n\t\t\tthis._tableWidthMax = 0;\n\t\t}\n\n\t\tthis.c3 = window.c3;\n\t\tthis.chart( ( 'chart' in config ) ? config.chart : { data: { columns: [] } } );\n\n\t\tthis.selectTable = d3.select( this.bindto ).append( 'table' );\n\t\tthis.selectTable\n\t\t\t.append( 'thead' )\n\t\t\t.append( 'tr' );\n\t\tthis.selectTable\n\t\t\t.append( 'tbody' );\n\n\t\tthis.data( ( 'data' in config ) ? config.data : [] );\n\t\tthis.columns( ( 'columns' in config ) ? config.columns : [] );\n\t\tthis.sort( ( 'sort' in config ) ? config.sort : {} );\n\t}\n\n\tTable.prototype.data = function( data ) {\n\t\tvar self = this;\n\t\tif ( arguments.length === 0 ) return this._data || [];\n\t\tthis._data = this._data || [];\n\n\t\tdata.forEach( function( row ) {\n\t\t\tself.addRow( row );\n\t\t} );\n\n\t\tthis.redraw();\n\t};\n\n\tTable.prototype.unload = function() {\n\t\tthis._data = [];\n\t\tthis.selected = [];\n\t\tthis.chart().hide();\n\t\tthis.chartUpdate();\n\t\tthis.chart().unload();\n\t\tthis.redraw();\n\t};\n\n\tTable.prototype.addRow = function( row ) {\n\t\tvar newRow = [], k;\n\t\tfor ( k in row ) {\n\t\t\tif ( row.hasOwnProperty( k ) ) {\n\t\t\t\tnewRow.push( {\n\t\t\t\t\tkey: k,\n\t\t\t\t\tvalue: row[ k ]\n\t\t\t\t} );\n\t\t\t}\n\t\t}\n\n\t\tthis._data.push( newRow );\n\n\t\tthis.chartUpdate();\n\n\t\tthis.redraw();\n\t};\n\n\tTable.prototype.updateRow = function( row ) {\n\t\tvar data = this._data;\n\t\tvar i, j, k;\n\t\tvar updatedRow = [];\n\t\tvar findIndexForUpdate = function( array, key, value ) {\n\t\t\tfor ( i = 0; i < array.length; i++ ) {\n\t\t\t\tfor ( j = 0; j < array[ i ].length; j++ ) {\n\t\t\t\t\tif ( 'key' in array[ i ][ j ] ) {\n\t\t\t\t\t\tif ( array[ i ][ j ].key === key && 'value' in array[ i ][ j ] ) {\n\t\t\t\t\t\t\tif ( array[ i ][ j ].value === value ) {\n\t\t\t\t\t\t\t\treturn i;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn null;\n\t\t};\n\t\ti = findIndexForUpdate( data, 'name', row.name );\n\t\tif ( i == null ) {\n\t\t\tthis.addRow( row );\n\t\t\treturn;\n\t\t}\n\t\tfor ( k in row ) {\n\t\t\tif ( row.hasOwnProperty( k ) ) {\n\t\t\t\tupdatedRow.push( {\n\t\t\t\t\tkey: k,\n\t\t\t\t\tvalue: row[ k ]\n\t\t\t\t} );\n\t\t\t}\n\t\t}\n\t\tdata[ i ] = updatedRow;\n\t\tthis.chartUpdate();\n\t\tthis.redraw();\n\t};\n\tTable.prototype.columns = function( columns ) {\n\t\tif ( arguments.length === 0 ) return this._columns || [];\n\t\tcolumns || ( columns = {} );\n\t\tthis._columns = columns;\n\n\t\tthis.redraw();\n\t};\n\tTable.prototype.recalculate = function() {\n\t\tvar self = this;\n\t\tvar columns = this.columns(), data = this.data();\n\t\tvar widthRatio, cellFrom, columnConfig, checkRow, seriesFrom, nameFrom;\n\t\tvar name, v;\n\t\tself._tableWidth = ( typeof self.selectTable.node() === 'undefined' ) ? 100 : self.selectTable.node().getBoundingClientRect().width;\n\t\tself._tableHeight = ( typeof self.selectTable.node() === 'undefined' ) ? 100 : self.selectTable.node().getBoundingClientRect().height;\n\t\tif ( columns.length > 0 && data.length > 0 ) { // TODO: handle data without column definitions\n\t\t\tcolumns.forEach( function( col, i ) {\n\t\t\t\tif ( col.type === 'chart-bar' || col.type === 'highlight' || col.type === 'chart-spark' ) {\n\t\t\t\t\tcol.chart = col.chart || {};\n\t\t\t\t\tcol.chart.values = [];\n\t\t\t\t\twidthRatio = parseFloat( col.width ) / 100;\n\t\t\t\t\tcol.chart = col.chart || {};\n\t\t\t\t\tcol.chart.zeroBased = col.chart.zeroBased || false;\n\t\t\t\t\tcol.chart.width = Math.floor( self._tableWidth * widthRatio );\n\t\t\t\t\tif ( col.type === 'chart-bar' || col.type === 'highlight' ) {\n\t\t\t\t\t\tdata.forEach( function( row ) {\n\t\t\t\t\t\t\trow.forEach( function( cell ) {\n\t\t\t\t\t\t\t\tif ( cell.key === col.key ) {\n\t\t\t\t\t\t\t\t\tcol.chart.values.push( +cell.value );\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t} );\n\t\t\t\t\t\t} );\n\t\t\t\t\t\tcol.chart.x = d3.scale.linear().range( [ 0, col.chart.width ] );\n\t\t\t\t\t\tcol.chart.maxX = d3.max( col.chart.values, function( vv ) {\n\t\t\t\t\t\t\treturn +vv;\n\t\t\t\t\t\t} );\n\t\t\t\t\t\tcol.chart.minX = d3.min( col.chart.values, function( vv ) {\n\t\t\t\t\t\t\treturn +vv;\n\t\t\t\t\t\t} );\n\t\t\t\t\t\tcol.chart.maxX = ( col.chart.maxX > Math.abs( col.chart.minX ) ) ? col.chart.maxX : Math.abs( col.chart.minX );\n\t\t\t\t\t\tcol.chart.minX = ( col.chart.minX < ( -1 * col.chart.maxX ) ) ? col.chart.minX : ( -1 * col.chart.maxX );\n\t\t\t\t\t\tcol.chart.colors = [ '#f05336', '#faa224', '#ffd73e', '#c6e3bb', '#a3d393', '#64bc52' ];\n\t\t\t\t\t\tcol.chart.color = d3.scale.quantize()\n\t\t\t\t\t\t\t.domain( [ col.chart.minX, 0, col.chart.maxX ] )\n\t\t\t\t\t\t\t.range( col.chart.colors );\n\t\t\t\t\t\tcol.chart.x.domain( [ ( col.chart.zeroBased ) ? 0 : col.chart.minX, col.chart.maxX ] ).nice();\n\t\t\t\t\t} else if ( col.type === 'chart-spark' ) {\n\t\t\t\t\t\tcol.chart.values = [];\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tdata.forEach( function( row ) { // TODO: more elegant solution needed for aligning column and row definitions\n\t\t\t\t\tcheckRow = $.grep( row, function( e ) {\n\t\t\t\t\t\treturn e.key === col.key;\n\t\t\t\t\t} );\n\t\t\t\t\tif ( $.isEmptyObject( checkRow[ 0 ] ) || checkRow.length === 0 ) {\n\t\t\t\t\t\trow.splice( i, 0, { key: col.key, value: '-' } );\n\t\t\t\t\t}\n\t\t\t\t} );\n\t\t\t\tif ( self.responsive ) {\n\t\t\t\t\tif ( self._tableWidthMax > self._tableWidth ) {\n\t\t\t\t\t\tif ( col.bump === true ) {\n\t\t\t\t\t\t\tcol.hide = true;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tcol.hide = false;\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tcol.hide = false;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} );\n\n\t\t\tdata.forEach( function( row ) {\n\t\t\t\trow.forEach( function( cell ) {\n\t\t\t\t\tcolumnConfig = $.grep( columns, function( e ) {\n\t\t\t\t\t\treturn e.key === cell.key;\n\t\t\t\t\t} );\n\t\t\t\t\tcell.config = $.extend( true, {}, columnConfig[ 0 ] ) || {};\n\t\t\t\t\tcell.hide = ( 'hide' in cell.config ) ? cell.config.hide : false;\n\t\t\t\t\tcell.config.match = $.isEmptyObject( columnConfig[ 0 ] ) ? false : true;\n\t\t\t\t\tif ( 'chart' in cell.config && ( cell.config.type === 'chart-bar' || cell.config.type === 'highlight' ) ) {\n\t\t\t\t\t\tcell.x = cell.config.chart.x( cell.value ) || 0;\n\t\t\t\t\t\tcell.color = cell.config.chart.color( cell.value ) || '#000';\n\t\t\t\t\t\tif ( 'colorFrom' in cell.config.chart ) {\n\t\t\t\t\t\t\tcellFrom = $.grep( row, function( e ) {\n\t\t\t\t\t\t\t\treturn e.key === cell.config.chart.colorFrom;\n\t\t\t\t\t\t\t} );\n\n\t\t\t\t\t\t\tcell.color = cellFrom[ 0 ].color || cell.color;\n\t\t\t\t\t\t}\n\t\t\t\t\t} else if ( 'chart' in cell.config && cell.config.type === 'chart-spark' ) {\n\t\t\t\t\t\tseriesFrom = $.grep( row, function( e ) {\n\t\t\t\t\t\t\treturn e.key === 'series';\n\t\t\t\t\t\t} );\n\t\t\t\t\t\tnameFrom = $.grep( row, function( e ) {\n\t\t\t\t\t\t\treturn e.key === 'name';\n\t\t\t\t\t\t} );\n\t\t\t\t\t\tcell.config.chart.values = ( seriesFrom.length > 0 ) ? seriesFrom[ 0 ].value : [];\n\t\t\t\t\t\tname = ( nameFrom.length > 0 ) ? nameFrom[ 0 ].value : '';\n\t\t\t\t\t\tv = cell.config.chart.values.map( function( o ) {\n\t\t\t\t\t\t\treturn o[ name ];\n\t\t\t\t\t\t} );\n\n\t\t\t\t\t\tcell.config.chart.values = v;\n\n\t\t\t\t\t\tcell.config.chart.x = d3.scale.linear().domain( [ 0, v.length - 1 ] ).range( [ 0, cell.config.chart.width ] );\n\t\t\t\t\t\tcell.config.chart.y = d3.scale.linear().domain( [ d3.max( v ), d3.min( v ) ] ).range( [ 0, 20 ] );\n\t\t\t\t\t\tcell.config.chart.line = d3.svg.line()\n\t\t\t\t\t\t\t.x( function( d, i ) {\n\t\t\t\t\t\t\t\treturn cell.config.chart.x( i );\n\t\t\t\t\t\t\t} )\n\t\t\t\t\t\t\t.y( function( d ) {\n\t\t\t\t\t\t\t\treturn cell.config.chart.y( d );\n\t\t\t\t\t\t\t} )\n\t\t\t\t\t}\n\t\t\t\t} );\n\t\t\t} );\n\t\t}\n\t\tthis.sort();\n\t};\n\n\tTable.prototype.getRowName = function( row ) {\n\t\tvar i;\n\t\trow = row || [];\n\t\tfor ( i = 0; i < row.length; i++ ) {\n\t\t\tif ( row[ i ].key === 'name' ) {\n\t\t\t\treturn row[ i ].value;\n\t\t\t}\n\t\t}\n\t};\n\n\tTable.prototype.getRowDescription = function( row ) {\n\t\tvar i;\n\t\trow = row || [];\n\t\tfor ( i = 0; i < row.length; i++ ) {\n\t\t\tif ( row[ i ].key === 'description' ) {\n\t\t\t\treturn row[ i ].value;\n\t\t\t}\n\t\t}\n\t};\n","    Table.prototype.chart = function( config ) {\n        if ( arguments.length === 0 || $.isEmptyObject( config ) ) return this._chart || {};\n        config || ( config = {} );\n        this.chartConfig( config );\n        this._chart = this.c3.generate( this.chartConfig() ); // TODO: update if exists\n        return this._chart;\n    };\n    Table.prototype.chartConfig = function( config ) {\n        if ( arguments.length === 0 || $.isEmptyObject( config ) ) return this._chart_config || {};\n        config || ( config = {} );\n        this._chart_config = config;\n        return this._chart_config; // TODO: update if config changes and exists\n    };\n    Table.prototype.chartUpdate = function() {\n        var self = this;\n        var chart = this.chart();\n        var data = this.data();\n        var xs = [], columns = [], series = [];\n        var name;\n        data.forEach( function( row ) {\n            var chartSeries = self.getChartSeries( row );\n            xs = chartSeries.xs;\n            series = chartSeries.values;\n            columns.push( series );\n            name = self.getRowName( row );\n            if ( self.selected.indexOf( name ) === -1 ) {\n                if ( chart.internal.hiddenTargetIds.indexOf( name ) === -1 ) {\n                    chart.internal.hiddenTargetIds = chart.internal.hiddenTargetIds.concat( name );\n                }\n                if ( chart.internal.hiddenLegendIds.indexOf( name ) === -1 ) {\n                    chart.internal.hiddenLegendIds = chart.internal.hiddenLegendIds.concat( name );\n                }\n            }\n        } );\n        columns.unshift( xs ); // TODO: may need to handle series with different date/x ranges\n        self._chart_config.columns = columns;\n        chart.load( { columns: self._chart_config.columns } );\n    };\n    Table.prototype.getChartSeries = function( row ) {\n        var x, xs;\n        var nameCell = row.filter( function( obj ) {\n            return obj.key === 'name';\n        } );\n        var name = ( nameCell.length === 1 ) ? nameCell[0].value : 'y';\n        var seriesCell = row.filter( function( obj ) {\n            return obj.key === 'series';\n        } );\n        var series = ( seriesCell.length === 1 ) ? seriesCell[0].value : [];\n        var values = series.map( function( d ) {\n            return d[name];\n        } );\n        values.unshift( name );\n        x = this.chartConfig().data.x || 'x';\n        xs = series.map( function( d ) {\n            return d[x];\n        } );\n        xs.unshift( x );\n        return { xs: xs, values: values };\n    };\n    Table.prototype.rowSelect = function( row, selection ) {\n        var self = this;\n        var chart = this.chart( self._chart_config );\n        var name = self.getRowName( row );\n        row.forEach( function( cell ) {\n            if ( cell.key === 'series' ) {\n                self._chart_config = self._chart_config || {};\n                self.selected = self.selected || [];\n                toggleArrayItem( self.selected, name );\n                chart.hide( null, { withLegend: true } );\n                chart.show( self.selected, { withLegend: true } );\n            }\n        } );\n        self.chartUpdate();\n        d3.select( selection ).style( 'background-color', function() {\n            if ( self.selected.indexOf( name ) !== -1 ) {\n                var rgb = d3.rgb( self.chart().data.colors()[ name ] );\n                return 'rgba(' + rgb.r + ',' + rgb.g + ',' + rgb.b + ', 0.1)';\n            }\n            return '#fff';\n        } );\n    };\n\n","    Table.prototype.sort = function( sort ) {\n        var data = this.data();\n        if ( data.length < 2 && arguments.length === 0 ) return this._sort || {};\n        if ( arguments.length === 0 ) {\n            sort = this._sort || {};\n            if ( 'key' in sort && sort.key.length ) {\n                if ( 'direction' in sort ) {\n                    data.sort( sortByKey( sort.key, sort.direction ) );\n                    this._data = data;\n                }\n            }\n        } else {\n            this._sort = {\n                key: ( 'key' in sort ) ? sort.key : '',\n                direction: ( 'direction' in sort ) ? sort.direction : 'asc'\n            };\n            this.redraw();\n        }\n        return this._sort;\n    };\n    Table.prototype.sortColumn = function( selection ) {\n        var self = this;\n        var key = selection.key || '';\n        var newDirection = 'asc';\n        if ( '_sort' in self ) {\n            if ( 'key' in self._sort ) {\n                if ( self._sort.key === key ) {\n                    if ( 'direction' in self._sort ) {\n                        newDirection = ( self._sort.direction === 'asc' ) ? 'desc' : 'asc'; // toggle sort order\n                    }\n                }\n            }\n        }\n        this.sort( { key: key, direction: newDirection } );\n    };\n    function sortByKey( key, dir ) {\n        return function( a, b ) {\n            var aIndex = a.map( function( obj, index ) {\n                if ( obj.key === key ) {\n                    return index;\n                }\n            } ).filter( isFinite );\n\n            var bIndex = b.map( function( obj, index ) {\n                if ( obj.key === key ) {\n                    return index;\n                }\n            } ).filter( isFinite );\n\n            return ( dir === 'asc' ) ? ( a[aIndex].value > b[bIndex].value ) : ( a[aIndex].value < b[bIndex].value );\n        }\n    }\n\n","/*eslint no-trailing-spaces:0*/\n    Table.prototype.redrawHeader = function() {\n\t    var columns = this.columns().filter( function( col ) {\n\t\t\treturn !col.hide;\n\t    } );\n        var self = this;\n        var headerRows = this.selectTable.select( 'thead' ).selectAll( 'tr' );\n        var headerCells = headerRows.selectAll( 'th' ).data( columns );\n\n        headerCells.enter().append( 'th' )\n            .on( 'click', function( d ) {\n                self.sortColumn( d );\n                self.redraw();\n            } )\n            .style( 'width', function( d ) {\n                return d.width;\n            } )\n            .style( 'opacity', 0.0 )\n            .transition()\n            .delay( 500 )\n            .duration( 500 )\n            .style( 'opacity', 1.0 );\n        headerCells.html( function( d ) {\n            var glyph = '';\n            if ( '_sort' in self ) {\n                if ( 'key' in self._sort ) {\n                    if ( self._sort.key === d.key ) {\n                        if ( 'direction' in self._sort ) {\n                            glyph = ( self._sort.direction === 'asc' ) ?\n                                'noticon noticon-uparrow' : 'noticon noticon-downarrow'\n                        }\n                    }\n                }\n            }\n            return d.title + '<span class=' + glyph + '></span>';\n        } );\n        headerCells.exit()\n            .transition()\n            .delay( 200 )\n            .duration( 500 )\n            .style( 'opacity', 0.0 )\n            .remove();\n        var header_cells_in_new_rows = headerRows.selectAll( 'th' ).data( columns );\n        header_cells_in_new_rows.enter().append( 'th' )\n            .style( 'width', function( d ) {\n                return d.width;\n            } )\n            .style( 'opacity', 0.0 )\n            .transition()\n            .delay( 500 )\n            .duration( 500 )\n            .style( 'opacity', 1.0 );\n        header_cells_in_new_rows.html( function( d ) {\n            var glyph = '';\n            if ( '_sort' in self ) {\n                if ( 'key' in self._sort ) {\n                    if ( self._sort.key === d.key ) {\n                        if ( 'direction' in self._sort ) {\n                            glyph = ( self._sort.direction === 'asc' ) ?\n                                'noticon noticon-uparrow' : 'noticon noticon-downarrow'\n                        }\n                    }\n                }\n            }\n            return d.title + '<span class=' + glyph + '></span>';\n        } );\n        this.recalculate();\n    };\n    Table.prototype.redrawRows = function() {\n        var self = this;\n        var cells_in_new_rows;\n        var cells;\n        var tooltip = d3.select( 'body' )\n            .append( 'div' )\n            .style( 'position', 'absolute' )\n            .style( 'z-index', '10' )\n            .style( 'visibility', 'hidden' )\n            .text( 'a simple tooltip' );\n\n        var data = this.data();\n            var rows = this.selectTable.select( 'tbody' )\n                .on( 'mouseout', function() {\n                    d3.select( self.description ).html( '' );\n                } )\n                .selectAll( 'tr' )\n                .data( data )\n                .on( 'click', function( d ) {\n                    self.rowSelect( d, this );\n                } )\n                .on( 'mouseover', function( d ) {\n                    var html =\n                        '<div class=\"d3c-table-descr\">' +\n                            '<strong>' + self.getRowName( d ) + ': </strong>' +\n                            self.getRowDescription( d ) +\n                        '</div>';\n                    d3.select( self.description ).html( html );\n                    tooltip\n                        .style( 'visibility', 'visible' )\n                        .html( html );\n                } )\n                .on( 'mousemove', function() {\n                    return tooltip.style( 'top', ( event.pageY - 10 ) + 'px' ).style( 'left' , ( event.pageX + 10 ) + 'px' );\n                } )\n                .on( 'mouseout', function() {\n                    return tooltip.style( 'visibility', 'hidden' );\n                } )\n                .style( 'background-color', function( d ) {\n                    var name = self.getRowName( d );\n                    if ( self.selected.indexOf( name ) !== -1 ) {\n                        var rgb = d3.rgb( self.chart().data.colors()[ name ] );\n                        return 'rgba(' + rgb.r + ',' + rgb.g + ',' + rgb.b + ', 0.1)';\n                    }\n                    return '#fff';\n                } );\n            cells = rows.selectAll( 'td' ).data( function( d ) {\n                return $.grep( d, function( e ) {\n                    return e.config.match && !e.hide;\n                } );\n            } );\n            cells.enter().append( 'td' )\n                .style( 'width', function( d ) {\n                    return d.config.width;\n                } )\n                .style( 'opacity', 0.0 )\n                .transition()\n                .delay( 500 )\n                .duration( 500 )\n                .style( 'opacity', 1.0 );\n\n            cells.call( drawCell );\n\n            cells.exit()\n                .transition()\n                .delay( 200 )\n                .duration( 500 )\n                .style( 'opacity', 0.0 )\n                .remove();\n\n            cells_in_new_rows = rows.enter().append( 'tr' )\n                .on( 'click', function( d ) {\n                    self.rowSelect( d, this );\n                } )\n                .on( 'mouseover', function( d ) {\n                    var html =\n                        '<div class=\"d3c-table-descr\">' +\n                        '<strong>' + self.getRowName( d ) + ': </strong>' +\n                        self.getRowDescription( d ) +\n                        '</div>';\n                    d3.select( self.description ).html( html );\n                    tooltip\n                        .style( 'visibility', 'visible' )\n                        .html( html );\n                } )\n                .on( 'mousemove', function() {\n                    return tooltip.style( 'top', ( event.pageY - 10 ) + 'px' ).style( 'left' , ( event.pageX + 10 ) + 'px' );\n                } )\n                .on( 'mouseout', function() {\n                    return tooltip.style( 'visibility', 'hidden' );\n                } )\n                .style( 'background-color', function( d ) {\n                    var name = self.getRowName( d );\n                    if ( self.selected.indexOf( name ) !== -1 ) {\n                        var rgb = d3.rgb( self.chart().data.colors()[ name ] );\n                        return 'rgba(' + rgb.r + ',' + rgb.g + ',' + rgb.b + ', 0.1)';\n                    }\n                    return '#fff';\n                } )\n                .selectAll( 'td' )\n                .data( function( d ) {\n                    return $.grep( d, function( e ) {\n                        return e.config.match;\n                    } );\n                } );\n\n            cells_in_new_rows.enter().append( 'td' )\n                .style( 'width', function( d ) {\n                    return d.config.width;\n                } )\n                .style( 'opacity', 0.0 )\n                .transition()\n                .delay( 500 )\n                .duration( 500 )\n                .style( 'opacity', 1.0 );\n\n            cells_in_new_rows.call( drawCell );\n\n            rows.exit()\n                .transition()\n                .delay( 200 )\n                .duration( 500 )\n                .style( 'opacity', 0.0 )\n                .remove();\n    };\n\n    function drawCell( selection ) {\n        var x, color, width, svg, hcolor;\n        var svgSpark;\n        selection.each( function( dd ) {\n            var $$ = d3.select( this );\n            if ( dd.config.type === 'chart-bar' ) {\n                x = dd.config.chart.x;\n                color = dd.config.chart.color;\n                width = dd.config.chart.width;\n\t            $$.select( 'div' ).remove();\n                $$.select( 'svg' ).remove();\n\n                svg = $$.append( 'svg' )\n                    .attr( {\n                        width: width,\n                        height: 20\n                    } );\n                svg.append( 'rect' )\n                    .attr( 'class', function( d ) {\n                        return 'bar bar--' + ( d.value < 0 ? 'negative' : 'positive' );\n                    } )\n                    .attr( 'x', function( d ) {\n                        return ( d.config.chart.zeroBased ) ? x( 0 ) : x( Math.min( 0, d.value ) );\n                    } )\n                    .attr( 'y', 0 )\n                    .attr( 'rx', 3 )\n                    .attr( 'ry', 3 )\n                    .attr( 'width', function( d ) {\n                        return ( d.config.chart.zeroBased ) ? Math.abs( x( d.value ) ) : Math.abs( x( d.value ) - x( 0 ) );\n                    } )\n                    .attr( 'height', 20 )\n                    .attr( 'fill', function( d ) {\n                        return d.color; // color( d.value );\n                    } );\n                svg.append( 'text' )\n                    .text( function( d ) {\n                        return formatText( d );\n                    } )\n                    .attr( 'y', 15 )\n                    .attr( 'x', function( d ) {\n                        var posX = ( d.config.chart.zeroBased ) ? Math.abs( x( d.value ) ) : x( d.value );\n                        if ( d.config.chart.zeroBased ) {\n                            if ( posX > ( width / 2 ) ) {\n                                return x( 0 ) + Math.abs( x( 0 ) ) + 8;\n                            }\n                            return x( 0 ) + Math.abs( x( d.value ) - x( 0 ) ) + 5;\n                        }\n                        if ( posX < x( 0 ) ) {\n                            if ( posX < ( x( 0 ) / 2 ) ) {\n                                return posX + 5;\n                            }\n                            return posX - 40;\n                        } else if ( posX > ( x( 0 ) + ( ( width - x( 0 ) ) / 2 ) ) ) {\n                                return x( 0 ) + Math.abs( x( d.value ) - x( 0 ) ) - 40;\n                        }\n                        return x( 0 ) + Math.abs( x( d.value ) - x( 0 ) );\n                    } )\n                    .attr( 'class', function( d ) {\n                        var posX = x( d.value );\n                        if ( posX < x( 0 ) ) {\n                            if ( posX < ( x( 0 ) / 2 ) ) {\n                                return 'd3c-chart-label-neg-high';\n                            }\n                            return 'd3c-chart-label-neg-low';\n                        } else if ( posX > ( x( 0 ) + ( ( width - x( 0 ) ) / 2 ) ) ) {\n                            return 'd3c-chart-label-pos-high';\n                        }\n                        return 'd3c-chart-label-pos-low';\n                    } )\n                    .style( 'fill', function( d ) {\n                        var posX = x( d.value );\n                        if ( posX < x( 0 ) ) {\n                            if ( posX < ( x( 0 ) / 2 ) ) {\n                                return pickColor( d.color );\n                            }\n                            return '#000';\n                        } else if ( posX > ( x( 0 ) + ( ( width - x( 0 ) ) / 2 ) ) ) {\n                            return pickColor( d.color );\n                        }\n                        return '#000';\n                    } );\n            } else if ( dd.config.type === 'highlight' ) {\n                $$.select( 'div' ).remove();\n\t            $$.select( 'svg' ).remove();\n                hcolor = dd.config.chart.color;\n                $$.append( 'div' )\n                    .style( 'background-color', function( d ) {\n                        return hcolor( d.value )\n                    } )\n                    .style( 'text-align', 'center' )\n                    .style( 'border-radius', '3px' )\n                    .text( function( d ) {\n                        return formatText( d );\n                    } )\n                    .style( 'color', function() {\n                        return pickColor( d3.select( this ).style( 'background-color' ) );\n                    } );\n            } else if ( dd.config.type === 'chart-spark' ) {\n                width = dd.config.chart.width;\n\t            $$.select( 'div' ).remove();\n                $$.select( 'svg' ).remove();\n                svgSpark = $$.append( 'svg' )\n                    .attr( {\n                        width: width,\n                        height: 20\n                    } )\n                    .append( 'path' )\n                    .attr( 'd', dd.config.chart.line( dd.config.chart.values ) )\n                    .attr( 'stroke', 'black' ).attr( 'stroke-width', 0.5 ).attr( 'fill', 'none' );\n            } else {\n\t            $$.text( '' );\n                $$.text( function( d ) {\n                    return formatText( d );\n                } );\n            }\n        } );\n    }\n    Table.prototype.redraw = function() {\n        this.recalculate();\n        this.redrawHeader();\n        this.redrawRows();\n    };\n","    d3c.table = function( config ) {\n        return new Table( config );\n    };\n    if ( typeof define === 'function' && define.amd ) {\n        define( 'd3c', [ 'd3' ], function() {\n            return d3c;\n        });\n    } else if ( 'undefined' !== typeof exports && 'undefined' !== typeof module ) {\n        module.exports = d3c;\n    } else {\n        window.d3c = d3c;\n    }\n    } )( window );"],"sourceRoot":"/source/"}