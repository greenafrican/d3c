{"version":3,"sources":["head.js","core.js","tail.js"],"names":[],"mappingsfile":"d3c.js","sourcesContent":["(function (window) {\n    'use strict';\n\n/*global define, module, exports, require */","var d3c = { version: \"0.0.1\" };\n\nfunction Table(config) {\n    config = config || {};\n    this.bindto = ('bindto' in config) ? config.bindto : \"#d3c-table\";\n    this.columns(('columns' in config) ? config.columns : []);\n    this.data = ('data' in config) ? config.data : [];\n\n\n    this.selectTable = d3.select(this.bindto).append('table');\n    this.selectTable\n        .append('thead')\n        .append('tr');\n    this.selectTable\n        .append('tbody');\n}\n\nTable.prototype.addRow = function (row) {\n    var newRow = [];\n    for (var k in row) {\n        newRow.push({\n            key: k,\n            value: row[k]\n        });\n    }\n\n    row = this.bindColumnConfig(newRow);\n\n    this.data.push(row);\n\n    this.redraw();\n\n};\n\nTable.prototype.columns = function (columns) {\n    if (arguments.length === 0) return this._columns;\n    columns || (columns = {});\n    this._columns = columns;\n\n    var data = this.data || [];\n    if (data.length === 0) {\n        return this._columns;\n    }\n    else {\n        for (var i = 0; i < data.length; i++) {\n            data[i] = this.bindColumnConfig(data[i]);\n        }\n        this.data = data;\n    }\n\n    this.redraw();\n};\n\nTable.prototype.bindColumnConfig = function (row) {\n    var columns = this.columns();\n\n    // Bind column config to each cell and check that column definition and row definition match\n\n    row.forEach(function (r) {\n        var columnConfig = $.grep(columns, function (e) {\n            return e.key === r.key;\n        });\n        r.config = columnConfig[0] || {};\n        r.config.match = $.isEmptyObject(columnConfig[0]) ? false : true;\n    });\n\n    return row;\n};\n\nTable.prototype.updateColumnStats = function () {\n    var columns = this.columns(), data = this.data;\n    var tableWidth = this.selectTable.node().getBoundingClientRect().width;\n\n    columns.forEach(function (d) {\n        if (d.type === 'chart' || d.type === 'highlight') {\n            var values = [];\n            data.forEach(function (row) {\n                row.forEach(function (cell) {\n                    if (cell.key === d.key) {\n                        values.push(cell.value);\n                    }\n                });\n            });\n            var widthRatio = parseFloat(d.width) / 100;\n\n            d.chart = d.chart || {};\n            d.chart.zeroBased = d.chart.zeroBased || false;\n            d.chart.width = Math.floor(tableWidth * widthRatio);\n            d.chart.x = d3.scale.linear().range([0, d.chart.width]);\n\n            d.chart.maxX = d3.max(values, function (v) {\n                return v;\n            });\n            d.chart.minX = d3.min(values, function (v) {\n                return v;\n            });\n            d.chart.minX = (d.chart.minX === d.chart.maxX) ? 0 : d.chart.minX;\n            d.chart.maxX = (Math.abs(d.chart.maxX) > Math.abs(d.chart.minX)) ?\n                d.chart.maxX : Math.abs(d.chart.minX);\n            d.chart.minX = (Math.abs(d.chart.minX) > Math.abs(d.chart.maxX)) ?\n                d.chart.minX : (-1 * d.chart.maxX);\n\n            d.chart.colors = [\"#f05336\", \"#faa224\", \"#ffd73e\", \"#c6e3bb\", \"#a3d393\", \"#64bc52\"];\n            d.chart.color = d3.scale.quantize()\n                .domain([d.chart.minX, 0, d.chart.maxX])\n                .range(d.chart.colors);\n            d.chart.minX = (d.chart.minX >= 0) ? 0 : d.chart.minX;\n            d.chart.x.domain([(d.chart.zeroBased) ? 0 : d.chart.minX, d.chart.maxX]).nice();\n\n        }\n    });\n};\n\nTable.prototype.sortData = function (key, dir) {\n    var data = this.data;\n    data.sort(sortByKey(key, dir));\n\n    this.redraw();\n};\n\nTable.prototype.redrawHeader = function () {\n    var columns = this.columns();\n\n    var headerRows = this.selectTable.select('thead').selectAll('tr');\n    var headerCells = headerRows.selectAll('th').data(columns);\n\n    headerCells.enter().append('th')\n        .style('width', function (d) {\n            return d.width;\n        })\n        .style('opacity', 0.0)\n        .transition()\n        .delay(500)\n        .duration(500)\n        .style('opacity', 1.0);\n\n    headerCells.text(function (d) {\n        return d.title\n    });\n\n    headerCells.exit()\n        .transition()\n        .delay(200)\n        .duration(500)\n        .style('opacity', 0.0)\n        .remove();\n\n    var header_cells_in_new_rows = headerRows.selectAll('th').data(columns);\n\n    header_cells_in_new_rows.enter().append('th')\n        .style('width', function (d) {\n            return d.width;\n        })\n        .style('opacity', 0.0)\n        .transition()\n        .delay(500)\n        .duration(500)\n        .style('opacity', 1.0);\n\n    header_cells_in_new_rows.text(function (d) {\n        return d.title;\n    });\n\n    this.updateColumnStats();\n};\n\nTable.prototype.redrawRows = function () {\n    var data = this.data;\n\n    if (data.length > 0) {\n        var rows = this.selectTable.select('tbody').selectAll('tr').data(data);\n        var cells = rows.selectAll('td').data(function (d) {\n            return $.grep(d, function (e) {\n                // only include rows that fit the column definitions as per bindColumnConfig()\n                return e.config.match;\n            });\n        });\n\n        cells.enter().append('td')\n            .style('width', function (d) {\n                return d.config.width;\n            })\n            .style('opacity', 0.0)\n            .transition()\n            .delay(500)\n            .duration(500)\n            .style('opacity', 1.0);\n\n        cells.call(drawCell);\n\n        cells.exit()\n            .transition()\n            .delay(200)\n            .duration(500)\n            .style('opacity', 0.0)\n            .remove();\n\n        var cells_in_new_rows = rows.enter().append('tr')\n            .selectAll('td')\n            .data(function (d) {\n                return $.grep(d, function (e) {\n                    return e.config.match;\n                });\n            });\n\n        cells_in_new_rows.enter().append('td')\n            .style('width', function (d) {\n                return d.config.width;\n            })\n            .style('opacity', 0.0)\n            .transition()\n            .delay(500)\n            .duration(500)\n            .style('opacity', 1.0);\n\n        cells_in_new_rows.call(drawCell);\n\n        rows.exit()\n            .transition()\n            .delay(200)\n            .duration(500)\n            .style('opacity', 0.0)\n            .remove();\n\n    } else {\n        alert(\"Table has no data!\"); // TODO: gracefully handle no data\n    }\n\n};\n\nfunction drawCell(selection) {\n\n    selection.each(function (dd, i) {\n        var $$ = d3.select(this);\n        if (dd.config.type === 'chart') {\n            var x = dd.config.chart.x;\n            var color = dd.config.chart.color;\n            var width = dd.config.chart.width;\n\n            $$.select('svg').remove(); // TODO: work on transition (super nice to have though)\n\n            var svg = $$.append('svg')\n                .attr({\n                    \"width\": width,\n                    \"height\": 20\n                });\n            svg.append(\"rect\")\n                .attr(\"class\", function (d) {\n                    return \"bar bar--\" + (d.value < 0 ? \"negative\" : \"positive\");\n                })\n                .attr(\"x\", function (d) {\n                    return (d.config.chart.zeroBased) ? x(0) : x(Math.min(0, d.value));\n                })\n                .attr(\"y\", 0)\n                .attr('rx', 3)\n                .attr('ry', 3)\n                .attr(\"width\", function (d) {\n                    return (d.config.chart.zeroBased) ? Math.abs(x(d.value)) : Math.abs(x(d.value) - x(0));\n                })\n                .attr(\"height\", 20)\n                .attr(\"fill\", function (d) {\n                    return color(d.value);\n                });\n            svg.append('text')\n                .text(function(d) {\n                    return formatText(d);\n                })\n                .attr('y', 15)\n                .attr('x', function (d) {\n                    var posX = (d.config.chart.zeroBased) ? Math.abs(x(d.value)) : x(d.value);\n                    if (d.config.chart.zeroBased) {\n                        if (posX > (width / 2)) {\n                            return x(0) + Math.abs(x(0)) + 8;\n                        } else {\n                            return x(0) + Math.abs(x(d.value) - x(0)) + 5;\n                        }\n                    }\n                    if (posX < x(0)) {\n                        if (posX < (x(0) / 2)) {\n                            return posX + 5;\n                        } else {\n                            return posX - 40;\n                        }\n                    } else {\n                        if (posX > (x(0) + ((width - x(0)) / 2))) {\n                            return x(0) + Math.abs(x(d.value) - x(0)) - 40;\n                        } else {\n                            return x(0) + Math.abs(x(d.value) - x(0));\n                        }\n                    }\n                })\n                .attr('class', function (d, i) {\n                    var posX = x(d.value);\n\n                    if (posX < x(0)) {\n                        if (posX < (x(0) / 2)) {\n                            return 'd3c-chart-label-neg-high';\n                        } else {\n                            return 'd3c-chart-label-neg-low';\n                        }\n                    } else {\n                        if (posX > (x(0) + ((width - x(0)) / 2))) {\n                            return 'd3c-chart-label-pos-high';\n                        } else {\n                            return 'd3c-chart-label-pos-low';\n                        }\n                    }\n                });\n        } else if (dd.config.type === 'highlight') {\n            $$.select('div').remove(); // TODO: work on transition (super nice to have though)\n\n            var hcolor = dd.config.chart.color;\n            $$.append('div')\n                .style('background-color', function(d) {\n                    return hcolor(d.value)\n                })\n                .style('text-align', 'center')\n                .text(function(d) {\n                    return formatText(d);\n                })\n                .style('color', function(d) { return pickColor(this);});\n        } else {\n            $$.text(function(d) {\n                return formatText(d);\n            });\n        }\n    });\n\n}\n\nTable.prototype.redraw = function () {\n    this.redrawHeader();\n    this.redrawRows();\n};\n\nfunction sortByKey(key, dir) {\n    return function (a, b) {\n        var aIndex = a.map(function (obj, index) {\n            if (obj.key == key) {\n                return index;\n            }\n        }).filter(isFinite);\n\n        var bIndex = b.map(function (obj, index) {\n            if (obj.key == key) {\n                return index;\n            }\n        }).filter(isFinite);\n\n        return (dir === 'asc') ? (a[aIndex].value > b[bIndex].value) : (a[aIndex].value < b[bIndex].value);\n    }\n}\n\nfunction formatText(d) {\n    switch (d.config.format) {\n        case 'text':\n            return d.value;\n            break;\n        case 'number':\n            return d3.format(',0f')(d.value);\n            break;\n        case 'percent':\n            return d3.format('.2%')(d.value);\n            break;\n        case 'currency':\n            return d3.format('$.2f')(d.value);\n            break;\n        default:\n            return d.value;\n    }\n}\n\nfunction pickColor(selection) {\n    var d = d3.select(selection);\n    var c = d3.values(d3.rgb(d.style('background-color'))).slice(0, 3);\n    for ( var i = 0; i < c.length; ++i ) {\n        c[i] = c[i] / 255;\n        if ( c[i] <= 0.03928 ) {\n            c[i] = c[i] / 12.92\n        } else {\n            c[i] = Math.pow( ( c[i] + 0.055 ) / 1.055, 2.4);\n        }\n    }\n    var l = 0.2126 * c[0] + 0.7152 * c[1] + 0.0722 * c[2];\n    //return ( l > 0.179 ) ? 'black' :'white';\n    return ( l > 0.5 ) ? 'black' :'white';\n}\n\nd3c.table = function (config) {\n    return new Table(config);\n};\n\n\n\n\n","    if (typeof define === 'function' && define.amd) {\n        define(\"d3c\", [\"d3\"], function () { return d3c; });\n    } else if ('undefined' !== typeof exports && 'undefined' !== typeof module) {\n        module.exports = d3c;\n    } else {\n        window.d3c = d3c;\n    }\n\n})(window);"],"sourceRoot":"/source/"}